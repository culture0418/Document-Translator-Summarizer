int color = 1; // => public static final int color = 1;public abstract double area();}Lab41public class Rectangle implements Shape{int x1=0;int y1=0;int x2=10;int y2=10;public double area(){return (x2-x1)*(y2-y1);}public void drawBorder(){System.out.println("Drawing the border of the rectangle...");}}Lab42public class Circle implements Shape{double radius = 3;public double area(){return radius*radius*3.14;}public void drawBorder(){System.out.println("Drawing the border of the circle...");}}Lab43public interface Printable {void printAll();}class Person implements Printable {private String name = new String("Bill");private int age = 22;public void printAll() {System.out.println("Name is " + name + ", age is " + age);}}public class PrintableTest {public static void main(String[] args) {Printable p = new Person();p.printAll();}}Anonymous Class44Anonymous classes enable you to make your code more concise. They enable you to declare and instantiate a class at the same time.interface Person {abstract void eat(String food);abstract void run();}class Demo {public static void main(String args[]) {Person p = new Person() { //Anonymous Classpublic void eat(String food) {System.out.println(food);}public void run() {System.out.println(“running");}};p.eat(“pizza”);}}Functional Interface45A functional interface is an interface that contains only one abstract methodinterface Person {abstract void eat(String food);abstract void run();}Lambda Expression(簡化版Anonymous Class)46• Lambda expressions basically express instances of functional interfaces• (p1, p2) -> System.out.println("Multiple parameters: " + p1 + ", " + p2);class Demo {public static void main(String args[]) {Person p = (food)->{System.out.println(food);};p.eat("Pizza");}}class Demo {public static void main(String args[]) {Person p = food->System.out.println(food);p.eat("Pizza");}}orPredefined Functional Interfaces4748import java.util.Arrays;import java.util.List;import java.util.function.Consumer;class Demo {public static void main(String args[]) {List<String> cities = Arrays.asList("Dhaka", "New York", "London");Consumer<List<String>> upperCaseConsumer = list -> {for (int i = 0; i < list.size(); i++) {list.set(i, list.get(i).toUpperCase());System.out.println(list.get(i));}};upperCaseConsumer.accept(cities);}}Lab (Consumer)Method Reference(再簡化版Anonymous Class)49• A method reference is the shorthand syntax for a lambda expression that contains just one method callclass Demo {public static void main(String args[]) {Person p = System.out::println;p.eat("Pizza");}}class Demo {public static void main(String args[]) {Person p = food->System.out.println(food);p.eat("Pizza");}}Using Lambda Expression as an Argument50import java.util.ArrayList;class Demo {public static void main(String args[]) {ArrayList<Integer> arrL = new ArrayList<Integer>();arrL.add(1);arrL.add(2);arrL.add(3);arrL.forEach((anyThing)->System.out.println(anyThing));}}51import java.util.*;import java.util.function.Consumer;public class Demo {public static void main(String[] args) {List<String> strList = Arrays.asList("A","B","C");// Anonymous class (匿名類別)strList.forEach(new Consumer<String>() {@Overridepublic void accept(String s) {System.out.print(s); // ABC}});// Lambda expressionstrList.forEach(s -> System.out.print(s)); // ABC// Method reference(方法參考)strList.forEach(System.out::print); // ABC// Method reference(方法參考) 使用靜態方法strList.forEach(Demo::static_printList); // ABC// Method reference(方法參考) 使用實例方法Demo demo = new Demo();strList.forEach(demo::instance_printList); // ABC}private static void static_printList(String s) {System.out.print(s);}private void instance_printList(String s) {System.out.print(s);}}LabReference“Absolute Java”. Walter Savitch and KenrickMock. Addison-Wesley; 5 edition. 2012“Java How to Program”. Paul Deitel and Harvey Deitel. Prentice Hall; 9 edition. 2011.“A Programmers Guide To Java SCJP Certification: A Comprehensive Primer 3rd Edition”. Khalid Mughal, Rolf Rasmussen. 