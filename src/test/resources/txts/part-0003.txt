public static void sleep(){System.out.println(“Sleep”);}}Lab28public class House {public static void main(String[] args) {Animal dog = new Dog();Animal cat = new Cat();playWith(dog);playWith(cat);dog.sit();cat.sit();}public static void playWith(Animal animal){animal.run();}}InterfacesAn interface is something like an extreme case of an abstract classHowever, an interface is not a classIt is a type that can be satisfied by any class that implements the interfaceThe syntax for defining an interface is similar to that of defining a classExcept the word interface is used in place of class29InterfacesAn interface specifies a set of methods that any class that implements the interface must have It contains method headings and constant definitions only• Any variables defined in an interface must be public, static, and final It contains no instance variables It can contain concrete and static methods after Java 830default void say(){System.out.println("Hello, this is default method");}static void sayLouder(String msg){System.out.println(msg);}Lab (Constants)31public interface Shape {int color = 1; // => public static final int color = 1;}public class Paint {public static void main(String[] args) {System.out.println(Shape.color);}}Interfaces All methods in an interface are implicitly public and abstract, so you can omit the public modifier. They cannot be given private or protectedpublic interface ISpec1 {//Not allowedprivate void run(); protected void run(); //Allowedvoid run(); public abstract void run(); default void run(){ … } static void run(){ … }}32InterfacesMultiple inheritance is not allowed in JavaInstead, Java's way of approximating multiple inheritance is through interfacespublic class ConcreteClass implements ISpec1, ISpec2, ISpec3{…}33Interfaces To implement an interface, a concrete class must do two things:1. implements Interface_Name2. The class must implement all the method headings listed in the definition(s) of the interface(s)34Lab35public class Circle implements Shape {double radius = 3;public double area() {return radius * radius * 3.14;}public static void main(String args[]) {Circle c = new Circle();c.echo();c.area();Shape.erase();}}public interface Shape {int color = 1; default void echo(){ System.out.println("Shape"); log();}private void log(){ System.out.println(“Log");}static void erase(){ System.out.println("Erase");}double area();}Lab36public class Paint {public static void main(String[] args) {System.out.println(Shape.color);Shape shape1 = new Rectangle();printArea(shape1);Shape shape2 = new Circle();printArea(shape2);}public static void printArea(Shape shape){System.out.println(shape.area());}}Abstract Classes Implementing InterfacesAbstract classes may implement one or more interfacesAny method headings given in the interface that are not given definitions are made into abstract methodsA concrete class must give definitions for all the method headings given in the abstract class and the interface37Abstract Class vs. Interface38public abstract class Shape {int color = 1; // not finalpublic Shape() { System.out.println("Constructor");}public void echo(){ System.out.println("Shape"); log(); }private void log(){ System.out.println(“Log");}public static void erase(){ System.out.println("Erase");}public abstract double area();}public interface Shape {int color = 1; // finaldefault void echo(){ System.out.println("Shape"); log();}private void log(){ System.out.println(“Log");}static void erase(){ System.out.println("Erase");}double area();}vs.Derived InterfacesLike classes, an interface may be derived from a base interfaceThis is called extending the interfaceThe derived interface must include the phraseextends BaseInterfaceNameA concrete class that implements a derived interface must have definitions for any methods in the derived interface as well as any methods in the base interface39Lab40public interface Drawing {public abstract void drawBorder();}public interface Shape extends Drawing{