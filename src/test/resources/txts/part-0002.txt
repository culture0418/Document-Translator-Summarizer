Payment p1 = new Payment();p1.checkout();payProcess(p1);Payment p2 = new CreditCardPayment();p2.checkout();payProcess(p2);}public static void payProcess(Payment p){if(p instanceof CreditCardPayment){((CreditCardPayment)p).sign();}}}A First Look at the cloneMethod Creates and returns a copy of this object.  x.clone() != x The heading for the clone method defined in the Object class is as follows:protected Object clone()A change to a more permissive access, such as from protected to public, is always allowed when overriding a method definition16Lab17public class A implements Cloneable{int num = 1;B b = new B();public Object clone(){try{return super.clone();}catch(Exception e){return null;}}}public class B implements Cloneable{int speed = 100;}Lab (Shallow Copy)18public class Test {public static void main(String[] args) {A a = new A();System.out.println(a.num);             //1System.out.println(a.b.speed);         //100A clone_a = (A) a.clone();System.out.println(clone_a.num);       //1System.out.println(clone_a.b.speed);   //100clone_a.num = 2;clone_a.b.speed = 200;System.out.println(a.num);             //1System.out.println(a.b.speed);         //200}}A First Look at the cloneMethod If a class has a copy constructor, the clone method for that class can use the copy constructor to create the copy returned by the clone methodpublic Sale clone(){return new Sale(this);}19Lab (Deep Copy)20public class A implements Cloneable{int num = 1;B b = new B();public A(A a){num = a.num;b.speed = a.b.speed;}public A(){}public Object clone(){return new A(this);}}Lab (Deep Copy)21public class Test {public static void main(String[] args) {A a = new A();System.out.println(a.num);             //1System.out.println(a.b.speed);         //100A clone_a = (A) a.clone();System.out.println(clone_a.num);       //1System.out.println(clone_a.b.speed);   //100clone_a.num = 2;clone_a.b.speed = 200;System.out.println(a.num);             //1System.out.println(a.b.speed);         //100}}Introduction to Abstract ClassesIn order to postpone the definition of a method, Java allows an abstract method to be declaredAn abstract method has a heading, but no method bodyThe body of the method is defined in the derived classesThe class that contains an abstract method is called an abstract class22Abstract MethodAn abstract method is like a placeholder for a method that will be fully defined in a descendent classIt has a complete method heading, to which has been added the modifier abstractIt cannot be privateIt has no method body, and ends with a semicolon in place of its bodypublic abstract double getPay();public abstract void doIt(int count);23Abstract ClassA class that has at least one abstract method is called an abstract classAn abstract class must have the modifier abstractincluded in its class heading:public abstract class Employee{private instanceVariables;. . .public abstract double getPay();. . .}24Abstract ClassAn abstract class can have any number of abstract and/or fully defined methods If a derived class of an abstract class adds to or does not define all of the abstract methods, then it is abstract also, and must add abstract to its modifierA class that has no abstract methods is called a concrete class25Pitfall:  You Cannot Create Instances of an Abstract ClassAn abstract class can only be used to derive more specialized classesWhile it may be useful to discuss employees in general, in reality an employee must be a salaried worker or an hourly workerAn abstract class can have constructors, but they cannot be used to create an object of the abstract class26Lab27public class Dog extends Animal {public void run(){System.out.println("The dog is running");}}public class Cat extends Animal{public void run(){System.out.println("The cat is running");}}public abstract class Animal {public Animal(){ System.out.println(“I am animal”);}public abstract void run();public void sit(){ System.out.println(“Sit down…”); }